[gd_scene load_steps=3 format=3 uid="uid://7q5i2yd56lvi"]

[sub_resource type="Theme" id="Theme_j5m2g"]
Label/font_sizes/font_size = 48

[sub_resource type="GDScript" id="GDScript_1s2f2"]
script/source = "extends ScrollContainer

var max_visible_items: int = 5
var item_height: float = 0.0

var items := []
var dummies := []
var index: int = 0
var selected: int = 0

var is_refreshing := false
var is_dragging := false

var tween: Tween

@export var items_start: int = 1
@export var items_end: int = 100

@onready var container: VBoxContainer = $Container

signal changed(selected: int)

func _ready() -> void:
	assert(max_visible_items >= 3)

	if max_visible_items % 2 == 0:
		push_warning(\"It's recommended to choose an `Odd` number for symmetry!\")

	_calc_item_height()
	_create_items()

	size.y = item_height * max_visible_items

	_snap_to_nearest()

	# We need to update the `item_height` if the window was resized
	get_tree().root.size_changed.connect(_on_window_resize)


func _process(_delta: float) -> void:
	if is_refreshing:
		return

	var current = roundi(scroll_vertical / item_height)

	if index != current:
		index = current
		selected = index + items_start

		changed.emit(selected)

		_update_items_style()


func _gui_input(event: InputEvent) -> void:
	if event is InputEventMouseButton:
		if event.button_index == MOUSE_BUTTON_LEFT:
			if event.pressed:
				is_dragging = true

				_stop_snapping()
			else:
				is_dragging = false

				_snap_to_nearest()

	elif event is InputEventMouseMotion and is_dragging:
		scroll_vertical -= event.relative.y


func set_selected(value: int):
	selected = clamp(value, items_start, items_end)
	index = selected - items_start

	scroll_vertical = index * int(item_height)

	_snap_to_nearest()


func set_range(start_value: int, end_value: int):
	items_start = start_value
	items_end = end_value

	_refresh()


func _create_items():
	# We add half of the amount of `max_visible_items` as dummies so,
	# the first and last items are centered when selected
	var new_dummies: int = int((max_visible_items - 1) / 2.0) \\
		if max_visible_items % 2 == 1 else int(max_visible_items / 2.0)

	for i in range(new_dummies):
		_add_dummy_item().custom_minimum_size.y = item_height

	for i in range(items_start, items_end + 1):
		var item := Label.new()
		item.text = str(i).pad_zeros(2)

		items.push_back(item)

		container.add_child(item)

	for i in range(new_dummies):
		_add_dummy_item().custom_minimum_size.y = item_height


func _refresh():
	is_refreshing = true

	items.clear()

	for child in container.get_children():
		child.queue_free()

	_create_items()

	await get_tree().process_frame

	is_refreshing = false


func _calc_item_height():
	# We create a temp label and after getting its styles, we remove it
	var temp_label := Label.new()
	temp_label.text = \"0\"

	container.add_child(temp_label)

	item_height = temp_label.size.y

	temp_label.queue_free()

	if dummies.size() > 0:
		for dummy: Control in dummies:
			dummy.custom_minimum_size.y = item_height


func _add_dummy_item() -> Control:
	var dummy := Control.new()

	dummies.push_back(dummy)

	container.add_child(dummy)

	return dummy


func _snap_to_nearest():
	tween = create_tween()
	tween.set_trans(Tween.TRANS_CUBIC)
	tween.set_ease(Tween.EASE_OUT)

	tween.tween_property(self, \"scroll_vertical\", index * int(item_height), 0.4)


func _stop_snapping():
	if tween.is_running():
		tween.kill()

# TODO: Make better visuals!
func _update_items_style():
	for i in items.size():
		var item: Label = items[i]

		if i == index:
			item.add_theme_color_override(\"font_color\", Color.YELLOW)

			continue

		# Reset the style of other items that are not selected
		item.add_theme_color_override(\"font_color\", Color.GRAY)

# Signals

func _on_window_resize() -> void:
	_calc_item_height()
"

[node name="NumberWheel" type="ScrollContainer"]
offset_right = 40.0
offset_bottom = 49.72
mouse_default_cursor_shape = 9
theme = SubResource("Theme_j5m2g")
horizontal_scroll_mode = 0
vertical_scroll_mode = 3
script = SubResource("GDScript_1s2f2")

[node name="Container" type="VBoxContainer" parent="."]
layout_mode = 2
theme_override_constants/separation = 0
